var app = angular.module("app", [ "ngAnimate", "ngSanitize", "ui.router", "angularytics" ]);

app.config([ "$httpProvider", "$stateProvider", "$locationProvider", "$urlRouterProvider", "AngularyticsProvider", function(a, b, c, d, e) {
    c.html5Mode({
        enabled: !0
    }), a.interceptors.push("AuthInterceptor"), e.setEventHandlers([ "Console", "GoogleUniversal" ]), 
    b.state("list", {
        url: "/",
        templateUrl: "templates/list.tpl.html",
        controller: "ListCtrl"
    }).state("listByCategory", {
        url: "/c/:category",
        templateUrl: "templates/list.tpl.html",
        controller: "CategoryListCtrl"
    }), d.otherwise("/");
} ]).run([ "Angularytics", "User", function(a, b) {
    a.init(), b.checkSession();
} ]), app.controller("AppCtrl", [ "$scope", "$rootScope", "User", function(a, b) {
    b.$on("auth::loggedIn", function(b, c) {
        3 === c.authLevel && (a.isAdmin = !0), a.user = c;
    }), b.$on("auth::loggedOut", function(b, c) {
        a.isAdmin = !1, a.user = void 0;
    });
} ]), app.controller("AuthCtrl", [ "$scope", "User", "StorageService", function(a, b, c) {
    a.authenticate = function() {
        b.login(a.user).then(function(a) {
            c.setSession(a, null, !0);
        })["catch"](function(a) {
            c.destroySession();
        });
    }, a.signup = function() {
        b.create(a.user).then(function(a) {
            console.log(a);
        })["catch"](function(a) {
            console.log(a);
        });
    }, window.angular.authenticate = function(b, c) {
        a.user = {
            email: b,
            password: c
        }, a.authenticate();
    };
} ]), app.controller("CategoryListCtrl", [ "$scope", "$stateParams", function(a, b) {
    console.log(b);
} ]), app.controller("ListCtrl", [ "$scope", "Job", function(a, b) {
    b.list().then(function(b) {
        return b.error ? console.log(b.error) : void (a.jobs = b);
    })["catch"](function(a) {
        console.log(data);
    }), a.getTimeInWords = function(a) {
        return moment(a).format("DD MMMM");
    }, a.approve = function(a) {
        if (confirm("Are you sure?")) {
            var c = this;
            b.update(a, !0).then(function(a) {
                return a.error ? console.log(a.error) : void (c.job = a);
            })["catch"](function(a) {
                console.log(a);
            });
        }
    }, a.toggleState = function(a) {
        if (confirm("Are you sure?")) {
            var c = this;
            b.toggle(a).then(function(a) {
                return a.error ? console.log(a.error) : void (c.job.active = a.active);
            })["catch"](function(a) {
                console.log(a);
            });
        }
    }, a["delete"] = function(a) {
        confirm("Are you sure?") && b.destroy(a).then(function(a) {
            return a.error ? console.log(a.error) : void delete self;
        })["catch"](function(a) {
            console.log(a);
        });
    };
} ]), app.factory("AuthInterceptor", [ "$location", "$q", "$window", "StorageService", "$rootScope", function(a, b, c, d, e) {
    return {
        request: function(a) {
            var b = d.getSession().token;
            return a.headers = a.headers || {}, b && "undefined" !== b && (a.headers.Authorization = "Bearer " + b), 
            a;
        },
        response: function(a) {
            return 401 === a.status ? d.destroySession() : 404 === a.status ? e.$emit("httpError::404") : 500 === a.status && e.$emit("httpError::500"), 
            a || b.when(a);
        },
        responseError: function(a) {
            return 401 === a.status ? d.destroySession() : 404 === a.status ? e.$emit("httpError::404") : 500 === a.status && e.$emit("httpError::500"), 
            b.reject(a);
        }
    };
} ]), app.factory("Job", [ "$http", "$q", function(a, b) {
    var c = {
        list: function(c) {
            var d = b.defer();
            return a.get("/api/job/list/0").success(function(a, b, c, e) {
                a.error && d.reject(a), d.resolve(a);
            }).error(function(a, b, c, e) {
                d.reject(a);
            }), d.promise;
        },
        toggle: function(c) {
            var d = b.defer();
            return a.put("/api/job/" + c + "/toggle").success(function(a, b, c, e) {
                a.error && d.reject(a), d.resolve(a);
            }).error(function(a, b, c, e) {
                d.reject(a);
            }), d.promise;
        },
        update: function(c, d) {
            d && (c.active = !0);
            var e = b.defer();
            return a.put("/api/job/" + c._id, c).success(function(a, b, c, d) {
                a.error && e.reject(a), e.resolve(a);
            }).error(function(a, b, c, d) {
                e.reject(a);
            }), e.promise;
        },
        destroy: function(c) {
            var d = b.defer();
            return a["delete"]("/api/job/" + c).success(function(a, b, c, e) {
                a.error && d.reject(a), d.resolve(a);
            }).error(function(a, b, c, e) {
                d.reject(a);
            }), d.promise;
        }
    };
    return c;
} ]), app.factory("StorageService", [ "$window", "$rootScope", "$location", function(a, b, c) {
    var d = function() {
        var a = "test", b = window.sessionStorage;
        try {
            return b.setItem(a, "1"), b.removeItem(a), !0;
        } catch (c) {
            return !1;
        }
    }(), e = {
        setSession: function(e, f, g) {
            e && e.token && e.user && (d ? (a.localStorage.remember = g, g ? (a.localStorage.token = e.token, 
            a.localStorage.user = JSON.stringify(e.user)) : (a.sessionStorage.token = e.token, 
            a.sessionStorage.user = JSON.stringify(e.user))) : (Cookies.set("token", e.token), 
            Cookies.set("user", JSON.stringify(e.user))), b.$emit("auth::loggedIn", e.user), 
            f && c.url(f));
        },
        setUser: function(c) {
            if (c) {
                if (d) {
                    var e = this.getSessionType();
                    e ? a.localStorage.user = JSON.stringify(c) : a.sessionStorage.user = JSON.stringify(c);
                } else Cookies.set("user", JSON.stringify(c.user));
                b.$emit("auth::loggedIn", c);
            }
        },
        getSession: function() {
            if (d) {
                var b = this.getSessionType();
                return b ? {
                    user: a.localStorage.user && "undefined" !== a.localStorage.user ? JSON.parse(a.localStorage.user) : null,
                    token: a.localStorage.token
                } : {
                    user: a.sessionStorage.user && "undefined" !== a.localStorage.user ? JSON.parse(a.sessionStorage.user) : null,
                    token: a.sessionStorage.token
                };
            }
            return {
                user: Cookies.get("user") && "undefined" !== Cookies.get("user") ? JSON.parse(Cookies.get("user")) : null,
                token: Cookies.get("token")
            };
        },
        destroySession: function() {
            if (d) {
                var c = this.getSessionType();
                c ? (a.localStorage.removeItem("token"), a.localStorage.removeItem("user")) : (a.sessionStorage.removeItem("token"), 
                a.sessionStorage.removeItem("user")), a.localStorage.removeItem("remember");
            } else Cookies.expire("token"), Cookies.expire("user");
            b.$emit("auth::loggedOut");
        },
        getSessionType: function() {
            return d && a.localStorage.remember ? !0 : !1;
        }
    };
    return e;
} ]), app.factory("User", [ "$http", "$rootScope", "$q", "StorageService", function(a, b, c, d) {
    var e = {
        checkSession: function() {
            var c = d.getSession().token;
            c && "undefined" !== c ? a.post("/api/session", {
                token: c
            }).success(function(a, c, e, f) {
                return a.error ? d.destroySession() : (d.setUser(a.user), void (b.categories = a.categories));
            }).error(function(a, b, c, e) {
                0 !== b && d.destroySession();
            }) : d.destroySession();
        },
        create: function(b) {
            var d = c.defer();
            return a.post("/api/user", b).success(function(a, b, c, e) {
                a.error && d.reject(a), d.resolve(a);
            }).error(function(a, b, c, e) {
                d.reject(a);
            }), d.promise;
        },
        login: function(b) {
            var d = c.defer();
            return a.post("/api/login", b).success(function(a, b, c, e) {
                a.error && d.reject(a), d.resolve(a);
            }).error(function(a, b, c, e) {
                d.reject(a);
            }), d.promise;
        },
        logout: function() {
            var b = c.defer();
            return a.get("/api/logout").success(function(a, c, d, e) {
                b.resolve(a);
            }).error(function(a, c, d, e) {
                b.resolve(a);
            }), b.promise;
        }
    };
    return e;
} ]);